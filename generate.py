import argparse
from pathlib import Path

import numpy as np

from src.models.pixel_cnn import PixelCNN
from src.models.made import Made
from src.utils.smart_montecarlo import mcmc

# Parser
parser = argparse.ArgumentParser()
parser.add_argument("--ckpt-path", type=Path, help="Path to the checkpoint")
parser.add_argument("--model", type=str, help="Model to generate")
parser.add_argument(
    "--num-sample",
    type=int,
    default=2,
    help="Number of sample to generate (default: 2)",
)
parser.add_argument(
    "--beta", type=float, default=1.0, help="Inverse temperature (default: 1.0)"
)
parser.add_argument(
    "--save-sample",
    dest="save_sample",
    action="store_true",
    help="Flag if you want to save samples after generation",
)
parser.add_argument(
    "--save-mcmc",
    dest="save_mcmc",
    action="store_true",
    help="Flag if you want to save samples after MCMC",
)
parser.add_argument(
    "--verbose",
    dest="verbose",
    action="store_true",
    help="Flag if you want to see prints in MCMC",
)


def generate(args: argparse.ArgumentParser):
    # choose the model
    model = PixelCNN if args.model == "pixelcnn" else Made
    # load the lighninig model
    model = model.load_from_checkpoint(args.ckpt_path)
    print(model)

    print(f"\nGenerating sample")

    out = model.sample(args.num_sample)

    save_path = "results/"
    size = out["sample"].shape[-1] ** 2

    if args.save_sample:
        save_name = (
            "size-"
            + str(size)
            + "_sample-"
            + str(args.num_sample)
            + "_"
            + args.ckpt_path.parts[-3]
        )
        print("\nSaving sample generated by PixelCNN as", save_name)
        np.savez(save_path + save_name, **out)

    num_sample = out["sample"].shape[0]
    mcmc(args.beta, args.num_sample - 1, out, verbose=args.verbose, save=args.save_mcmc)


if __name__ == "__main__":
    args = parser.parse_args()
    generate(args)
